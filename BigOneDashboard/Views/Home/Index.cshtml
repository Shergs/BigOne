@using Newtonsoft.Json;
@using Humanizer;

@model DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
    var message = TempData["Message"] as string;
    var messageType = TempData["MessageType"] as string;
    Guild? currentGuild = null;
    string? guild = Context.Session.GetString("CurrentGuild");
    if (guild != null)
    {
        currentGuild = JsonConvert.DeserializeObject<Guild>(guild);
    }
    string isQueueContentHidden = "";
    string isNoResultsQueue = "";
    string isHistoryContentHidden = "";
    string isNoResultsHistory = "";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.css" />

<!-- Toast Message -->
@if (!string.IsNullOrEmpty(message))
{
    <div id="toast-message" class="fixed top-[77px] right-4 @(messageType == "Success" ? "bg-green-500" : "bg-red-500") text-white px-4 py-2 rounded">
        @message
        <div class="w-full bg-gray-400 rounded h-1 mt-2">
            <div id="toast-progress" class="bg-white h-1 rounded transition-all duration-5000 ease-linear" style="width: 100%;"></div>
        </div>
    </div>
}

@if (currentGuild != null)
{
    <div class="px-2 py-4 md:px-4 tw-pt-8 grid auto-rows-[42px] gap-5" style="grid-template-columns: repeat(12, minmax(0, 128px));">
        @* Now Playing *@
        <div id="NowPlayingCard" class="dark:bg-gray-600 dark:!text-white border border-gray-400 rounded-[16px] shadow-lg background-gray-400 col-span-12 row-span-7">
            <div class="w-full h-full mx-auto my-8">
                <div class="flex flex-row w-full px-8 rounded-lg">
                    <div class="bg-white dark:!bg-gray-700 border border-gray-400 px-8 pt-8 rounded-lg shadow-md w-80" @* data-itemType="sound" *@ id="nowPlayingPlayer">
                        <!-- Video Player -->
                        @if (string.IsNullOrEmpty(Model.embedUrl))
                        {
                            <div class="w-64 h-64 bg-gray-800 items-center justify-content-center dark:!text-white rounded-lg" id="noVideoResults">
                                <span>No song playing yet.</span>
                            </div>
                            <div id="nowPlayingVideo" class="w-64 h-64 mx-auto rounded-lg mb-4 shadow-lg shadow-teal-50 rounded-lg hidden"></div>

                        }
                        else
                        {
                            <div id="nowPlayingVideo" class="w-64 h-64 mx-auto rounded-lg mb-4 shadow-lg shadow-teal-50 rounded-lg"></div>
                        }
                        <!-- Song Title -->
                        <h2 id="nowPlayingTitle" class="text-xl font-semibold text-center w-full truncate scrolling-text">T-Shirt</h2>
                        <!-- Artist Name -->
                        <p id="nowPlayingArtist" class="text-gray-600 dark:!text-white text-sm text-center w-full truncate scrolling-text">Migos</p>
                        <!-- Music Controls -->
                        <div class="mt-6 flex justify-center items-center">
                            <button id="muteToggle" onclick="toggleMute(this);" class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 focus:outline-none">
 
                                <svg id="mute" width="64px" height="64px" class="w-4 h-4 text-gray-600 hidden" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                                    <!--!Font Awesome Free 6.5.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                    <path fill="#000000" d="M301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3zM425 167l55 55 55-55c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-55 55 55 55c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-55-55-55 55c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l55-55-55-55c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z" />
                                </svg>
                                <svg id="unmute" width="64px" height="64px" class="w-4 h-4 text-gray-600" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                                    <!--!Font Awesome Free 6.5.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                    <path fill="#000000" d="M533.6 32.5C598.5 85.2 640 165.8 640 256s-41.5 170.7-106.4 223.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C557.5 398.2 592 331.2 592 256s-34.5-142.2-88.7-186.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM473.1 107c43.2 35.2 70.9 88.9 70.9 149s-27.7 113.8-70.9 149c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C475.3 341.3 496 301.1 496 256s-20.7-85.3-53.2-111.8c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zm-60.5 74.5C434.1 199.1 448 225.9 448 256s-13.9 56.9-35.4 74.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C393.1 284.4 400 271 400 256s-6.9-28.4-17.7-37.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3z" />
                                </svg>
                            </button>
                            <button class="p-4 rounded-full bg-gray-200 hover:bg-gray-300 focus:outline-none mx-4" id="nowPlayingPause" data-type="playPauseBtn">
                                <svg id="pauseVideo" data-type="pause" width="64px" height="64px" viewBox="0 0 24 24" class="w-6 h-6 text-gray-600 dark:!text-white hidden" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                    <g id="SVGRepo_iconCarrier">
                                        <path d="M2 6C2 4.11438 2 3.17157 2.58579 2.58579C3.17157 2 4.11438 2 6 2C7.88562 2 8.82843 2 9.41421 2.58579C10 3.17157 10 4.11438 10 6V18C10 19.8856 10 20.8284 9.41421 21.4142C8.82843 22 7.88562 22 6 22C4.11438 22 3.17157 22 2.58579 21.4142C2 20.8284 2 19.8856 2 18V6Z" fill="#000000"></path>
                                        <path d="M14 6C14 4.11438 14 3.17157 14.5858 2.58579C15.1716 2 16.1144 2 18 2C19.8856 2 20.8284 2 21.4142 2.58579C22 3.17157 22 4.11438 22 6V18C22 19.8856 22 20.8284 21.4142 21.4142C20.8284 22 19.8856 22 18 22C16.1144 22 15.1716 22 14.5858 21.4142C14 20.8284 14 19.8856 14 18V6Z" fill="#000000"></path>
                                    </g>
                                </svg>
                                <svg id="playVideo" data-type="play" width="64px" height="64px" xmlns="http://www.w3.org/2000/svg" data-type="play" class="size-6 text-gray-600" viewBox="0 0 384 512">
                                    <!--!Font Awesome Free 6.5.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                    <path d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z" fill="#000000" />
                                </svg>
                            </button>
                            <button class="p-3 rounded-full bg-gray-200 hover:bg-gray-300 focus:outline-none" id="nowPlayingSkip">
                                <svg width="64px" height="64px" viewBox="0 0 24 24" class="w-4 h-4 text-gray-600 dark:!text-white" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                    <g id="SVGRepo_iconCarrier">
                                        <path d="M16.6598 14.6474C18.4467 13.4935 18.4467 10.5065 16.6598 9.35258L5.87083 2.38548C4.13419 1.26402 2 2.72368 2 5.0329V18.9671C2 21.2763 4.13419 22.736 5.87083 21.6145L16.6598 14.6474Z" fill="#000000"></path>
                                        <path d="M22.75 5C22.75 4.58579 22.4142 4.25 22 4.25C21.5858 4.25 21.25 4.58579 21.25 5V19C21.25 19.4142 21.5858 19.75 22 19.75C22.4142 19.75 22.75 19.4142 22.75 19V5Z" fill="#000000"></path>
                                    </g>
                                </svg>
                            </button>
                        </div>
                         <div class="mt-6 bg-gray-200 h-2 rounded-full hover:bg-gray-400 cursor-pointer" id="customSeekBar" data-type="seekSlider">
                            <div class="bg-teal-500 h-2 rounded-full w-1/2 hover:bg-teal-600"></div>
                        </div> 
                        <!-- Time Information -->
                        <div class="flex justify-between mt-2 text-sm text-gray-600 dark:!text-white pb-4">
                            <span id="nowPlayingCurrentTime" data-type="currentTime">0:00</span>
                            <span id="nowPlayingDuration" data-type="duration">0:00</span>
                        </div>
                    </div>
                    @* Queue *@
                    <div class="flex flex-col w-full w-[calc(100%-80px)] ml-4">
                        <div id="playSongToServer" class="hidden flex items-center space-x-2">
                            <input id="newSongQuery" type="text" class="flex-grow p-2 border border-gray-300 rounded-md" placeholder="Enter song name or URL">
                            <div class="relative group" data-type="dropdown-container">
                                <button data-type="dropdown-button" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Select Channel</button>
                                <div id="newSongServerSelect" data-type="dropdown-menu" class="hidden absolute z-10 w-48 mt-2 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none dark:bg-gray-800">
                                    <input data-type="search-input" class="block w-full px-4 py-2 border rounded-md text-gray-900 focus:outline-none" type="text" placeholder="Search items" autocomplete="off">
                                    @if (Model.VoiceChannels.Count > 0)
                                    {
                                        @foreach (GuildChannel voiceChannel in Model.VoiceChannels)
                                        {
                                            <a href="#" class="dropdown-item block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 active:bg-blue-100 cursor-pointer dark:text-gray-200 dark:hover:bg-gray-600"
                                               data-type="selection"
                                               data-value="@voiceChannel.Id">@voiceChannel.Name</a>
                                        }
                                    }
                                </div>
                                <input type="hidden" data-type="selected" value="" />
                            </div>
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onclick="sendPlaySong();">
                                Play
                            </button>
                        </div>
                        <div id="expandCollapsePlaySongToServer" class="bg-green-500 text-green-400">
                            <button class="text-green bg-green" onclick="">
                                PLUS
                            </button>
                        </div>
                        <div class="p-4 w-full max-h-[290px] border border-gray-600 rounded-[16px] shadow-sm overflow-y-auto smoothScroll" id="queue">

                            @if (Model.Songs.Count > 0)
                            {
                                isNoResultsQueue = "hidden";
                            }
                            else
                            {
                                isQueueContentHidden = "hidden";
                            }
                            <div id="queueContent" class="@isQueueContentHidden">
                                @foreach (Song song in Model.Songs)
                                { 
                                    @await Html.PartialAsync("_SongPartial", song)
                                }
                            </div>
                            <span id="noQueueResults" class="@isNoResultsQueue">Player doesn't have queued songs on this server.</span>
                        </div>
                        @* History *@
                        <div class="p-4 mt-4 w-full max-h-[290px] border border-gray-600 rounded-[16px] shadow-sm overflow-y-auto smoothScroll">
                            @if (Model.SongHistory.Count > 0)
                            {
                                isNoResultsHistory = "hidden";
                            }
                            else
                            {
                                isHistoryContentHidden = "hidden";
                            }
                            <div id="historyContent" class="@isHistoryContentHidden">
                                @foreach (SongHistoryItem songHistoryItem in Model.SongHistory)
                                {
                                    @await Html.PartialAsync("_HistoryItemPartial", songHistoryItem)
                                }
                            </div>
                            <span id="noResultsHistory" class="@isNoResultsHistory">No song history found for ths server.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Save new sound*@
        <div id="SaveNewSoundCard" class="dark:bg-gray-600 dark:!text-white border border-gray-400 rounded-[16px] shadow-lg !col-span-12 !row-span-6 md:!col-span-4 md:!row-span-7">
            <div class="w-full h-full mx-auto my-8">
                <div class="flex flex-col w-full px-8 rounded-lg">
                    <h2 class="text-2xl mb-4 font-bold">Save New Sound</h2>
                    <div class="hidden lg:block">
                        <p><strong>Server:</strong> @Model.Guild.Name</p>
                    </div>
                    <p><strong>Discord User:</strong> @Model.DiscordName</p>
                    @using (Html.BeginForm("SaveNewSound", "Home", FormMethod.Post, new { id = "SaveNewSound", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.SaveNewSoundViewModel.serverId)

                        <div class="mt-4">
                            @Html.LabelFor(m => m.SaveNewSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-300" })
                            @Html.TextBoxFor(m => m.SaveNewSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900", id = "Name" })
                            @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            @Html.LabelFor(m => m.SaveNewSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-300" })
                            <input id="EmoteSelector" name="@Html.NameFor(m => m.SaveNewSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900" />
                            @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            @Html.LabelFor(m => m.SaveNewSoundViewModel.File, new { @class = "block text-sm font-medium text-gray-300" })
                            <input type="file" id="File" name="@Html.NameFor(m => m.SaveNewSoundViewModel.File)" class="mt-1 block w-full px-3 py-2 border rounded-md" />
                            @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.File, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save</button>
                        </div>
                    }
                </div>
            </div>
        </div>

        @*Soundboard display*@
        <div id="SoundboardCard" class="dark:bg-gray-600 dark:!text-white border border-gray-400 rounded-[16px] shadow-lg background-gray-400 !col-span-12 md:!col-span-8 !row-span-7">
            <div class="w-full h-full mx-auto my-8">
                <div class="flex flex-col w-full px-8 rounded-lg">
                    <div class="flex flex-row justify-between items-center mb-4">
                        <div class="flex flex-col">
                            <h2 class="text-2xl font-bold">Soundboard</h2>
                            <p><strong>Server:</strong> @Model.Guild.Name</p>
                        </div>
                        <div class="relative group" data-type="dropdown-container">
                            <button data-type="dropdown-button" type="button" class="text-white dark:!text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Select Channel</button>
                            <div data-type="dropdown-menu" class="hidden absolute right-0 mt-2 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 p-1 space-y-1 dark:!bg-gray-900 dark:!text-white">
                                <input data-type="search-input" class="block w-full px-4 py-2 border rounded-md dark:!text-white !border-gray-900 focus:outline-none dark:!bg-gray-900" type="text" placeholder="Search items" autocomplete="off">
                                <!-- Dropdown content here -->
                                @if (Model.VoiceChannels.Count > 0)
                                {
                                    @foreach (GuildChannel voiceChannel in Model.VoiceChannels)
                                    {
                                        <a href="#" class="dropdown-item block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 active:bg-blue-100 cursor-pointer dark:text-gray-200 dark:hover:bg-gray-600"
                                           data-type="selection"
                                           data-value="@voiceChannel.Id">@voiceChannel.Name</a>
                                    }
                                }
                            </div>
                            <input type="hidden" data-type="selected" value="" />
                        </div>
                    </div>
                    <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm overflow-y-auto smoothScroll">
                        @foreach (Sound sound in Model.Sounds)
                        {
                            @await Html.PartialAsync("SoundPartial", sound)
                        }
                    </div>
                </div>
            </div>
        </div>

        @* Text to speech *@
        <div id="TTSCard" class="dark:bg-gray-600 dark:!text-white border border-gray-400 rounded-[16px] shadow-lg background-gray-400 col-span-12 row-span-5">
            <div class="w-full h-full mx-auto my-8">
                <div class="flex flex-col w-full px-8 rounded-lg">
                    <div class="flex flex-row justify-between items-center mb-4">
                        <div class="flex flex-col">
                            <h2 class="text-2xl font-bold">Text To Speech</h2>
                            <p><strong>Server:</strong> @Model.Guild.Name</p>
                        </div>
                        <div class="relative group" data-type="dropdown-container">
                            <button data-type="dropdown-button" type="button" class="text-white dark:!text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                Select Voice
                            </button>
                            <div data-type="dropdown-menu" class="hidden absolute right-0 mt-2 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 p-1 space-y-1 dark:!bg-gray-900 dark:!text-white">
                                <input data-type="search-input" class="block w-full px-4 py-2 border rounded-md dark:!text-white !border-gray-900 focus:outline-none dark:!bg-gray-900" type="text" placeholder="Search items" autocomplete="off">
                                <!-- Dropdown content here -->
                                @if (Model.Voices.Count > 0)
                                {
                                    @foreach (Voice voice in Model.Voices)
                                    {
                                        <a class="block px-4 py-2 text-gray-700 hover:bg-gray-100 active:bg-blue-100 cursor-pointer rounded-md dark:text-gray-300 dark:hover:text-blue-500 dark:hover:bg-blue-300" data-dropdown-element="voicechannel" value="@voice.Name">@voice.Name</a>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm background-gray-400 overflow-y-auto">
                        @using (Html.BeginForm("TTSSubmit", "Home", FormMethod.Post, new { id = "textToSpeechForm", @class = "w-full" }))
                        {
                            <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm background-gray-400 overflow-y-auto">
                                    <textarea name="query" class="w-full h-full dark:!bg-gray-300 dark:!text-gray-900"></textarea>
                            </div>
                            <button type="button" id="TTSPlayButton" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Play</button>
                                <button type="button" name="action" value="save" data-bs-toggle="modal" data-bs-target="#saveTTSModal" class="mt-4 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save</button>
                            <button type="submit" name="action" value="playToServer" class="mt-4 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">Play to Server</button>
                            <input type="hidden" name="ttsServerId" value="@Model.serverId"/>
                            <!-- Audio Player -->
                            <div style="display:none;">
                                <audio id="audioPlayer" controls preload="none">
                                    <source src="" type="audio/mp3">
                                    Your browser does not support the audio element.
                                </audio>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @* Edit Modal *@
        <div class="modal fade" id="editSoundModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content rounded-md shadow-lg dark:!bg-gray-600 dark:text-white">
                    <div class="modal-header border-b border-gray-200 dark:border-gray-300">
                        <h5 class="modal-title" id="editSoundModalLabel">Edit Sound</h5>
                        <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body bg-white dark:!bg-gray-600 p-5">
                        @using (Html.BeginForm("EditSound", "Home", FormMethod.Post, new { id = "EditSound", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.EditSoundViewModel.Id, new { id = "SoundId" })
                            @Html.HiddenFor(model => model.EditSoundViewModel.serverId)

                            <div class="mt-4">
                                @Html.LabelFor(m => m.EditSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-300" })
                                @Html.TextBoxFor(m => m.EditSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900", id = "EditName" })
                                @Html.ValidationMessageFor(m => m.EditSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                            </div>

                            <div class="mt-4">
                                @Html.LabelFor(m => m.EditSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-300" })
                                <input id="EditEmoteSelector" name="@Html.NameFor(m => m.EditSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900" />
                                @Html.ValidationMessageFor(m => m.EditSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save Sound</button>
                            </div>
                        }
                    </div>
                    <div class="modal-footer border-t border-gray-200 dark:border-gray-300">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        @* Delete Modal *@
        <div class="modal fade" id="deleteSoundModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content rounded-md shadow-lg dark:!bg-gray-600 dark:text-white">
                    <div class="modal-header border-b border-gray-200 dark:border-gray-300">
                        <h5 class="modal-title" id="editSoundModalLabel">Delete Sound</h5>
                        <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body bg-white dark:!bg-gray-600 p-5">
                        @using (Html.BeginForm("DeleteSound", "Home", FormMethod.Post, new { id = "DeleteSound", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.DeleteSoundViewModel.Id, new { id = "SoundId" })
                            @Html.HiddenFor(model => model.DeleteSoundViewModel.serverId)
                            <p class="mb-4"><strong>Name:</strong><span id="deleteSoundName"></span> </p>
                            <span>Are you sure you would like to delete this sound?</span>
                        }
                    </div>
                    <div class="modal-footer border-t border-gray-200 dark:border-gray-300">
                        <button type="submit" class="btn btn-primary" form="DeleteSound">Yes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    </div>
                </div>
            </div>
        </div>

        @* Save TTS Modal *@
        <div class="modal fade" id="saveTTSModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content rounded-md shadow-lg dark:!bg-gray-600 dark:text-white">
                    <div class="modal-header border-b border-gray-200 dark:border-gray-300">
                        <h5 class="modal-title" id="editSoundModalLabel">Save TTS</h5>
                        <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body bg-white dark:!bg-gray-600 p-5">
                        @using (Html.BeginForm("SaveTTS", "Home", FormMethod.Post, new { id = "SaveTTS", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.EditSoundViewModel.serverId) 

                            <div class="mt-4">
                                @Html.LabelFor(m => m.EditSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-300" })
                                @Html.TextBoxFor(m => m.EditSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900", id = "EditName" })
                                @Html.ValidationMessageFor(m => m.EditSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                            </div>

                            <div class="mt-4">
                                @Html.LabelFor(m => m.EditSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-300" })
                                <input id="EditEmoteSelector" name="@Html.NameFor(m => m.EditSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md dark:!bg-gray-300 dark:!text-gray-900" />
                                @Html.ValidationMessageFor(m => m.EditSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save TTS</button>
                            </div>
                        }
                    </div>
                    <div class="modal-footer border-t border-gray-200 dark:border-gray-300">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
}
else
{
    <div class="flex items-center justify-center min-h-screen bg-gray-100 dark:!bg-gray-800">
        <div id="select-a-merchant" class="tw-font-bold tw-text-center tw-justify-center tw-w-full tw-height-full tw-h-[590px] tw-flex tw-flex-col">
            <span class="tw-text-2xl tw-pb-4 dark:!text-white">Select a Server</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="dark:!text-white" height="5em" fill="currentColor" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M320 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h82.7L201.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L448 109.3V192c0 17.7 14.3 32 32 32s32-14.3 32-32V32c0-17.7-14.3-32-32-32H320zM80 32C35.8 32 0 67.8 0 112V432c0 44.2 35.8 80 80 80H400c44.2 0 80-35.8 80-80V320c0-17.7-14.3-32-32-32s-32 14.3-32 32V432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16H192c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z" /></svg>
        </div>
    </div>
}

<template id="songTemplate">
    @* Use partial here *@
    @await Html.PartialAsync("_SongPartial", (Song?)null)
</template>

<template id="historyItemTemplate">
    @await Html.PartialAsync("_HistoryItemPartial", (SongHistoryItem?)null)
</template>

@section Scripts {
    

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            setTimeout(() => {
                const toast = document.getElementById('toast-message');
                if (toast) {
                    toast.classList.add('opacity-0');
                    setTimeout(() => { toast.remove(); }, 500); 
                }
            }, 5000);

            const progressBar = document.getElementById('toast-progress');
            if (progressBar) {
                progressBar.style.transition = 'width 5000ms linear';
                progressBar.style.width = '0%';
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#TTSPlayButton').click(function () {
                var textToSpeech = $('textarea[name="query"]').val();
                $.ajax({
                    url: '@Url.Action("PlayTTS", "Home")',
                    type: 'POST',
                    data: { query: textToSpeech },
                    success: function (response) {
                        console.log(response.audioUrl);
                        $('#audioPlayer source').attr('src', response.audioUrl);
                        $('#audioPlayer')[0].load(); 
                        $('#audioPlayer')[0].play(); 
                    },
                    error: function () {
                        alert('Error generating speech.');
                    }
                });
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script src="/js/Index.js"></script>
    <script type="text/javascript">
        setGlobals('@Model.botUrl', '@Model.serverId', '@Model.DiscordName');
    </script>
    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        var playing = false;
        var initialPlay = false;
        var lastKnownTime = -1;
        function onYouTubeIframeAPIReady() {
            console.log('in youtubeIFrameReady');
            try {
                player = new YT.Player('nowPlayingVideo', {
                    height: '256',
                    width: '256',
                    videoId: '@Model.embedUrl', 
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange,
                        'onError': onPlayerError
                    }
                });
            } catch (e) {
                console.log("Error creating player" + e);
            }
        }

        function onPlayerReady(event) {
            // Bind controls here, for example:
            // Can also load the video here. (Would be faster to load the page and everything)
            console.log('in player ready');
            player.mute();
            player.playVideo();
            player.seekTo(@Model.Position);

            @if (!string.IsNullOrEmpty(Model.embedUrl))
            {
                @:playing = true; // Set JavaScript variable directly
            }

            @if (Model.Song != null)
            {
                // Song.Name
                @:document.getElementById('nowPlayingTitle').innerText = '@Model.Song.Name';
                // Song.Author
                @:document.getElementById('nowPlayingArtist').innerText = '@Model.Song.Artist';
            }
            document.getElementById('nowPlayingPause').addEventListener('click', togglePlayPause);
            document.getElementById('nowPlayingSkip').addEventListener('click', skipClick)
            document.getElementById('customSeekBar').addEventListener('click', seekClick);
            updateDurationDisplay();
        }
    </script>
}

