@using Newtonsoft.Json;

@model DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
    var message = TempData["Message"] as string;
    var messageType = TempData["MessageType"] as string;
    Guild? currentGuild = null;
    string? guild = Context.Session.GetString("CurrentGuild");
    if (guild != null)
    {
        currentGuild = JsonConvert.DeserializeObject<Guild>(guild);
    }
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.css" />
<!-- Toast Message -->
@if (!string.IsNullOrEmpty(message))
{
    <div id="toast-message" class="fixed top-[77px] right-4 @(messageType == "Success" ? "bg-green-500" : "bg-red-500") text-white px-4 py-2 rounded">
        @message
    </div>
}

@if (currentGuild != null)
{
<div class="p-4 tw-pt-8 grid auto-rows-[42px] gap-5" style="grid-template-columns: repeat(12, minmax(0, 128px));">
        
    @*Save new sound*@
    <div id="SaveNewSoundCard" class="border border-gray-400 rounded-[16px] shadow-lg" style="grid-column: span 4/span 4; grid-row: span 7/span 7;">
        <div class="w-full h-full mx-auto my-8">
            <div class="flex flex-col w-full px-8 bg-white rounded-lg">
                <h2 class="text-2xl mb-4 font-bold">Save New Sound</h2>
                <p><strong>Server:</strong> @Model.Guild.Name</p>
                <p><strong>Discord User:</strong> @Model.DiscordName</p>
                @using (Html.BeginForm("SaveNewSound", "Home", FormMethod.Post, new { id = "SaveNewSound", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.SaveNewSoundViewModel.serverId)

                    <div class="mt-4">
                        @Html.LabelFor(m => m.SaveNewSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(m => m.SaveNewSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md", id = "Name" })
                        @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                    </div>

                    <div class="mt-4">
                        @Html.LabelFor(m => m.SaveNewSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-700" })
                        <input id="EmoteSelector" name="@Html.NameFor(m => m.SaveNewSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md" />
                        @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                    </div>

                    <div class="mt-4">
                        @Html.LabelFor(m => m.SaveNewSoundViewModel.File, new { @class = "block text-sm font-medium text-gray-700" })
                        <input type="file" id="File" name="@Html.NameFor(m => m.SaveNewSoundViewModel.File)" class="mt-1 block w-full px-3 py-2 border rounded-md" />
                        @Html.ValidationMessageFor(m => m.SaveNewSoundViewModel.File, "", new { @class = "text-red-600 text-sm" })
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save New Sound</button>
                    </div>
                }
            </div>
        </div>
    </div>

    @*Soundboard display*@
    <div id="SoundboardCard" class="border border-gray-400 rounded-[16px] shadow-lg background-gray-400" style="grid-column: span 8/span 8; grid-row: span 7/span 7;">
        <div class="w-full h-full mx-auto my-8">
            <div class="flex flex-col w-full px-8 bg-white rounded-lg">
                <h2 class="text-2xl mb-2 font-bold">Soundboard</h2>
                <p class="mb-4"><strong>Server:</strong> @Model.Guild.Name</p>
                <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm background-gray-400 overflow-y-auto">
                    @foreach (Sound sound in Model.Sounds)
                    {
                        <div class="flex items-center p-4 w-full border border-gray-600 rounded-[16px] shadow-sm bg-gray-100 mb-4 justify-between">
                            <div class="flex items-center space-x-4" style="align-items:center;">
                                <div>@sound.Emote</div>
                                <div>@sound.Name</div>
                            </div>
                            <!-- Audio Player -->
                            <div class="flex-grow px-4" style="margin-left:auto;">
                                <audio controls preload="none">
                                    <source src="@Url.Action("GetSound", "Home", new { soundName = sound.Name, filePath = sound.FilePath })" type="audio/mp3">
                                    Your browser does not support the audio element.
                                </audio>
                            </div>
                            <!-- Buttons -->
                            <div class="ml-auto flex items-center space-x-2" style="margin-left:auto;">
                                @* <button type="button" class="px-4 py-2 bg-blue-100 text-white rounded-md hover:bg-blue-200 mr-[16px]" id="playToServer">Server Play</button> *@
                                <button type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mr-[16px]" data-bs-toggle="modal" data-bs-target="#editSoundModal" onclick="setModalSoundId('editSoundModal','@sound.Id')" style="margin-right:16px;">Edit</button>
                                <button type="button" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600" data-bs-toggle="modal" data-bs-target="#deleteSoundModal" onclick="setModalSoundId('deleteSoundModal','@sound.Id')">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @* Edit Modal *@
    <!-- Modal Background -->
    <div class="modal fade" id="editSoundModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-md shadow-lg">
                <div class="modal-header border-b">
                    <h5 class="modal-title" id="editSoundModalLabel">Edit Sound</h5>
                    <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-white p-5">
                    <!-- Form Start -->
                    @using (Html.BeginForm("EditSound", "Home", FormMethod.Post, new { id = "EditSound", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.EditSoundViewModel.Id, new { id = "SoundId" })
                        @Html.HiddenFor(model => model.EditSoundViewModel.serverId)

                        <div class="mt-4">
                            @Html.LabelFor(m => m.EditSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.TextBoxFor(m => m.EditSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md", id = "EditName" })
                            @Html.ValidationMessageFor(m => m.EditSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            @Html.LabelFor(m => m.EditSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-700" })
                            <input id="EditEmoteSelector" name="@Html.NameFor(m => m.EditSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md" />
                            @Html.ValidationMessageFor(m => m.EditSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save Sound</button>
                        </div>
                    }
                </div>
                <div class="modal-footer border-t">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    @* Delete Modal *@
    <div class="modal fade" id="deleteSoundModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-md shadow-lg">
                <div class="modal-header border-b">
                    <h5 class="modal-title" id="editSoundModalLabel">Delete Sound</h5>
                    <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-white p-5">
                    @using (Html.BeginForm("DeleteSound", "Home", FormMethod.Post, new { id = "DeleteSound", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.DeleteSoundViewModel.Id, new { id = "SoundId" })
                        @Html.HiddenFor(model => model.DeleteSoundViewModel.serverId)
                        <p class="mb-4"><strong>Name:</strong><span id="deleteSoundName"></span> </p>
                        <span>Are you sure you would like to delete this sound?</span>
                    }
                </div>
                <div class="modal-footer border-t">
                    <button type="submit" class="btn btn-primary" form="DeleteSound">Yes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    @* Text to speech *@
    <div id="TTSCard" class="border border-gray-400 rounded-[16px] shadow-lg background-gray-400" style="grid-column: span 12/span 12; grid-row: span 4/span 4;">
        <div class="w-full h-full mx-auto my-8">
            <div class="flex flex-col w-full px-8 bg-white rounded-lg">
                <h2 class="text-2xl mb-2 font-bold">Text to Speech</h2>
                <p class="mb-4"><strong>Server:</strong> @Model.Guild.Name</p>
                <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm background-gray-400 overflow-y-auto">
                    @using (Html.BeginForm("TTSSubmit", "Home", FormMethod.Post, new { id = "textToSpeechForm", @class = "w-full" }))
                    {
                        <div class="p-4 w-full max-h-[400px] border border-gray-600 rounded-[16px] shadow-sm background-gray-400 overflow-y-auto">
                            <textarea name="query" class="w-full h-full"></textarea>
                        </div>
                        <button type="button" id="TTSPlayButton" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Play</button>
                        <button type="button" name="action" value="save" data-bs-toggle="modal" data-bs-target="#editSoundModal" class="mt-4 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save</button>
                        <button type="submit" name="action" value="playToServer" class="mt-4 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">Play to Server</button>
                        <input type="hidden" name="ttsServerId" value="@Model.serverId"/>
                        <!-- Audio Player -->
                        <div style="display:none;">
                            <audio id="audioPlayer" controls preload="none">
                                <source src="" type="audio/mp3">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @* Save TTS Modal *@
    <!-- Modal Background -->
    <div class="modal fade" id="saveTTSModal" tabindex="-1" aria-labelledby="editSoundModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-md shadow-lg">
                <div class="modal-header border-b">
                    <h5 class="modal-title" id="editSoundModalLabel">Edit Sound</h5>
                    <button type="button" class="close text-red-500" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-white p-5">
                    <!-- Form Start -->
                    @using (Html.BeginForm("SaveTTS", "Home", FormMethod.Post, new { id = "SaveTTS", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.EditSoundViewModel.serverId) 

                        <div class="mt-4">
                            @Html.LabelFor(m => m.EditSoundViewModel.Name, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.TextBoxFor(m => m.EditSoundViewModel.Name, new { @class = "mt-1 p-2 w-full border rounded-md", id = "EditName" })
                            @Html.ValidationMessageFor(m => m.EditSoundViewModel.Name, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            @Html.LabelFor(m => m.EditSoundViewModel.Emote, new { @class = "block text-sm font-medium text-gray-700" })
                            <input id="EditEmoteSelector" name="@Html.NameFor(m => m.EditSoundViewModel.Emote)" class="mt-1 p-2 w-full border rounded-md" />
                            @Html.ValidationMessageFor(m => m.EditSoundViewModel.Emote, "", new { @class = "text-red-600 text-sm" })
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">Save TTS</button>
                        </div>
                    }
                </div>
                <div class="modal-footer border-t">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>
}
else
{
    <div class="flex items-center justify-center min-h-screen bg-gray-100">
        <div id="select-a-merchant" class="tw-font-bold tw-text-center tw-justify-center tw-w-full tw-height-full tw-h-[590px] tw-flex tw-flex-col">
            <span class="tw-text-2xl tw-pb-4">Select a Server</span>
            <svg xmlns="http://www.w3.org/2000/svg" height="5em" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M320 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h82.7L201.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L448 109.3V192c0 17.7 14.3 32 32 32s32-14.3 32-32V32c0-17.7-14.3-32-32-32H320zM80 32C35.8 32 0 67.8 0 112V432c0 44.2 35.8 80 80 80H400c44.2 0 80-35.8 80-80V320c0-17.7-14.3-32-32-32s-32 14.3-32 32V432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16H192c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z" /></svg>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Remove the toast message after 5 seconds
        setTimeout(() => {
            const toast = document.getElementById('toast-message');
            if (toast) { 
                toast.remove();
            }
        }, 5000);
    </script>
    <script>
        $(document).ready(function () {
            // initialize emoji selector
            try {
                $("#EmoteSelector").emojioneArea({
                    pickerPosition: "bottom",
                    filtersPosition: "bottom",
                    tones: false,
                    autocomplete: false,
                    inline: true,
                    events: {
                        keyup: function (editor, event) {
                            let content = this.getText();
                            let matches = content.match(/[\ud800-\udbff][\udc00-\udfff]/g); // Match all potential emojis
                            if (matches && matches.length > 0) {
                                this.setText(matches[0]); // Set only the first found emoji
                            } else {
                                this.setText(''); // Clear if no valid emojis
                            }
                        },
                        paste: function (editor, event) {
                            setTimeout(() => { // Timeout to let paste complete and then process
                                let content = this.getText();
                                let matches = content.match(/[\ud800-\udbff][\udc00-\udfff]/g); // Match all potential emojis
                                if (matches && matches.length > 0) {
                                    this.setText(matches[0]); // Set only the first found emoji
                                } else {
                                    this.setText(''); // Clear if no valid emojis
                                }
                            }, 100);
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing EmojiOne Area:", error);
            }
            try {
                $("#EditEmoteSelector").emojioneArea({
                    pickerPosition: "bottom",
                    filtersPosition: "bottom",
                    tones: false,
                    autocomplete: false,
                    inline: true,
                    events: {
                        keyup: function (editor, event) {
                            let content = this.getText();
                            let matches = content.match(/[\ud800-\udbff][\udc00-\udfff]/g); // Match all potential emojis
                            if (matches && matches.length > 0) {
                                this.setText(matches[0]); // Set only the first found emoji
                            } else {
                                this.setText(''); // Clear if no valid emojis
                            }
                        },
                        paste: function (editor, event) {
                            setTimeout(() => { // Timeout to let paste complete and then process
                                let content = this.getText();
                                let matches = content.match(/[\ud800-\udbff][\udc00-\udfff]/g); // Match all potential emojis
                                if (matches && matches.length > 0) {
                                    this.setText(matches[0]); // Set only the first found emoji
                                } else {
                                    this.setText(''); // Clear if no valid emojis
                                }
                            }, 100);
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing EmojiOne Area:", error);
            }

            // Validate submission
            document.getElementById('SaveNewSound').onsubmit = function () {
                const emoteInput = $("#EmoteSelector").data("emojioneArea").getText();
                const isValidEmoji = /^[\ud800-\udbff][\udc00-\udfff]$/.test(emoteInput);

                if (!isValidEmoji) {
                    alert('Please select exactly one emoji.');
                    return false; // Prevent form submission
                }

                return true; // Allow form submission
            };

            // Validate submission
            document.getElementById('EditSound').onsubmit = function () {
                const emoteInput = $("#EditEmoteSelector").data("emojioneArea").getText();
                const isValidEmoji = /^[\ud800-\udbff][\udc00-\udfff]$/.test(emoteInput);

                if (!isValidEmoji) {
                    alert('Please select exactly one emoji.');
                    return false; // Prevent form submission
                }

                return true; // Allow form submission
            };
        });
    </script>
    <script>
        function setModalSoundId(modalId, soundId) {
            fetch(`/Home/GetSoundDetails?id=${soundId}`)
                .then(response => response.json())
                .then(data => {
                    console.log(data.name); 
                    console.log(data.emote);

                    var modal = document.getElementById(modalId);
                    var hidSoundId = modal.querySelector('#SoundId');

                    if (hidSoundId) {
                        hidSoundId.value = soundId; 
                    }

                    if (modalId == "editSoundModal") {
                        var nameInput = document.getElementById('EditName');
                        if (nameInput) {
                            nameInput.value = data.name;
                        }

                        var emoteInput = $('#EditEmoteSelector'); // Your original input selector
                        if (emoteInput.data("emojioneArea")) {
                            emoteInput.data("emojioneArea").setText(data.emote);
                        }
                    }
                    else if (modalId == "deleteSoundModal") {
                        var soundName = document.getElementById('deleteSoundName');
                        if (soundName) {
                            soundName.innerText = data.emote + data.name;
                        }
                    }
                })
                .catch(error => console.error('Error fetching sound details:', error));
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#TTSPlayButton').click(function () {
                var textToSpeech = $('textarea[name="query"]').val();
                $.ajax({
                    url: '@Url.Action("PlayTTS", "Home")',
                    type: 'POST',
                    data: { query: textToSpeech },
                    success: function (response) {
                        // Assuming the response is the URL to the audio file
                        console.log(response.audioUrl);
                        $('#audioPlayer source').attr('src', response.audioUrl);
                        $('#audioPlayer')[0].load(); // Reload the source
                        $('#audioPlayer')[0].play(); // Play the audio
                    },
                    error: function () {
                        alert('Error generating speech.');
                    }
                });
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js"></script>
}

